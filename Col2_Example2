/*
Original Author: Sofia Ermida (sofia.ermida@ipma.pt; @ermida_sofia)
https://github.com/sofiaermida/Landsat_SMW_LST

Updated to USGS Collection 2 Definitions by Séamus O'Donnell 
(https://www.linkedin.com/in/seamusodonnell/)

This code is free and open. 
By using this code and any data derived with it, you agree to cite the following 
reference in any publications derived from them:
Ermida, S.L., Soares, P., Mantas, V., Göttsche, F.-M., Trigo, I.F., 2020. 
    Google Earth Engine open-source code for Land Surface Temperature estimation from the Landsat series.
    Remote Sensing, 12 (9), 1471; https://doi.org/10.3390/rs12091471

Example 2:
  This example shows how to get LST time series at the SURFRAD DRA site
  It corresponds to the method used to extract time series for comparison with station 
  LST used in Ermida et al. (2020).
    
*/
// link to the code that computes the Landsat LST
var LandsatLST = require('users/SeamusWOD/SE_LST_COL2:Modules/Col2_Landsat_LST.js');
// link to the code that computes broad-band emissivity
var BBE = require('users/SeamusWOD/SE_LST_COL2:Modules/Col2_broadband_emiss.js');

// select region of interest, date range, and landsat satellite
var site = ee.Geometry.Point([0,51.5]);
//var geometry = site.buffer(30);
var date_start = '1982-06-01';
var date_end = '2022-07-30';
var use_ndvi = true;

// Map settings
Map.centerObject(site, 3);
Map.clear();
Map.setControlVisibility(false);
Map.style().set('cursor', 'crosshair');
Map.setOptions("HYBRID");
// Creates LST on point clicked on the map
Map.onClick(function(coords) {
    var location = 'lon: ' + coords.lon.toFixed(3) +
                   'lat: ' + coords.lat.toFixed(3);
    var geometry = ee.Geometry.Point(coords.lon, coords.lat);

// compute the LST for each Landsat
var L9coll = LandsatLST.collection('L9', date_start, date_end, geometry, use_ndvi);
var L8coll = LandsatLST.collection('L8', date_start, date_end, geometry, use_ndvi);
var L7coll = LandsatLST.collection('L7', date_start, date_end, geometry, use_ndvi);
var L5coll = LandsatLST.collection('L5', date_start, date_end, geometry, use_ndvi);
var L4coll = LandsatLST.collection('L4', date_start, date_end, geometry, use_ndvi);

// compute broadband emissivity
L9coll = L9coll.map(BBE.addBand(true));
L8coll = L8coll.map(BBE.addBand(true));
L7coll = L7coll.map(BBE.addBand(true));
L5coll = L5coll.map(BBE.addBand(true));
L4coll = L4coll.map(BBE.addBand(true));

// get bands for each landsat in one collection
var getband = function(landsat, bandname){
  var wrap = function(image){
    return image.select(bandname).rename(bandname.concat('_').concat(landsat));
  };
  return wrap;
};
// merge all Landsat LST collections for the chart
var bandname = 'LST';
var LandsatColl = L9coll.map(getband('L9',bandname));
LandsatColl = LandsatColl.merge(L8coll.map(getband('L8',bandname)));
LandsatColl = LandsatColl.merge(L7coll.map(getband('L7',bandname)));
LandsatColl = LandsatColl.merge(L5coll.map(getband('L5',bandname)));
LandsatColl = LandsatColl.merge(L4coll.map(getband('L4',bandname)));

// Timeseries chart (see console)
var TimeSeries = ui.Chart.image.series(
    LandsatColl, geometry/*, ee.Reducer.mean(), 30, 'system:time_start'*/)
        .setChartType('ScatterChart')
        .setOptions({
          title: 'Surface Temperature of ' + 'Lon: ' + coords.lon.toFixed(3) + ', Lat: ' + coords.lat.toFixed(3),
          hAxis: {  // x-axis
            viewWindow: {title: 'Acquisition Time'}
          },
          vAxis: {  // y-axis
            viewWindow: {min: 253.15, max:333.15},
                        title: bandname + ', K'
                        },
        explorer: {},
        lineWidth: 1,
        pointSize: 4,
        trendlines: {
          // Draw a trendline for data series 0.
          0: {
            visibleInLegend: true,
            labelInLegend: bandname + ' Temperature Trend',
          },
          /*1: {
            visibleInLegend: true,
            labelInLegend: 'L7 Trend',
          },*/
          }
});
Chartpanel.widgets().set(0, TimeSeries);
});
var Chartpanel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical'),
  style: {
  width: '33%',
  height: 'max',
  position: "bottom-left"
  }})
    .add(ui.Label({
      value: 'Click on a place to generate a temperature timeseries chart of that point', 
      style: {position: 'top-center', textAlign: 'center', fontWeight: 'bold', whiteSpace: 'pre'}
    }));
Map.add(Chartpanel);

// uncomment and edit the code below to export timeseries to your drive
/*
var myFeatures = ee.FeatureCollection(L9coll.map(function(image){
  var date = ee.Date(image.get('system:time_start'));
  var lst = image.select('LST')
  var em = image.select('EM')
  var fvc = image.select('FVC')
  var tpw = image.select('TPW')
  var bbe = image.select('BBE')
  return ee.Feature(site, {
    'year':ee.Number(date.get('year')), 
    'month':ee.Number(date.get('month')),
    'day':ee.Number(date.get('day')),
    'hour':ee.Number(date.get('hour')),
    'minute':ee.Number(date.get('minute')),
    'lst':ee.Number(lst.reduceRegion(
      ee.Reducer.mean(),geometry,30).get('LST')),
    'tpw':ee.Number(tpw.reduceRegion(
      ee.Reducer.mean(),geometry,30).get('TPW')),
    'em':ee.Number(em.reduceRegion(
      ee.Reducer.mean(),geometry,30).get('EM')),
    'fvc':ee.Number(fvc.reduceRegion(
      ee.Reducer.mean(),geometry,30).get('FVC')),
    'bbe':ee.Number(bbe.reduceRegion(
      ee.Reducer.mean(),geometry,30).get('BBE'))
  });
}));

Export.table.toDrive({
  collection: myFeatures,
  description: 'MyTask',
  folder: 'MyFolder',
  fileNamePrefix: 'Landsat9_LST_timeseries', 
  fileFormat: 'CSV'
});
*/