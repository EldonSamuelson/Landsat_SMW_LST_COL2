/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = ee.FeatureCollection("users/SeamusWOD/26Counties_RoI"),
    geometry2 = 
    /* color: #98ff00 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-10.74497362323008, 52.34948719034636],
          [-10.74497362323008, 51.98899298221422],
          [-9.34421678729258, 51.98899298221422],
          [-9.34421678729258, 52.34948719034636]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/*
Original Author: Sofia Ermida (sofia.ermida@ipma.pt; @ermida_sofia)
https://github.com/sofiaermida/Landsat_SMW_LST

Updated to USGS Collection 2 Definitions by Séamus O'Donnell 
(https://www.linkedin.com/in/seamusodonnell/)

This code is free and open. 
By using this code and any data derived with it, you agree to cite the following 
reference in any publications derived from them:
Ermida, S.L., Soares, P., Mantas, V., Göttsche, F.-M., Trigo, I.F., 2020. 
    Google Earth Engine open-source code for Land Surface Temperature estimation from the Landsat series.
    Remote Sensing, 12 (9), 1471; https://doi.org/10.3390/rs12091471

Example 1:
  This example shows how to compute Landsat LST from Landsat-9 over Coimbra
  This refers to the original images shown in Ermida et al. (2020), updated for Collection 2.
    
*/
// link to the code that computes the Landsat LST
var LandsatLST = require('users/SeamusWOD/SE_LST_COL2:Modules/Col2_Landsat_LST.js');

// select region of interest, date range, and landsat satellite
var geometry2 = ee.FeatureCollection("users/SeamusWOD/26Counties_RoI").filter("NAME_1 == 'Kerry'");
var geometry = 
    /* color: #98ff00 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-10.74497362323008, 52.34948719034636],
          [-10.74497362323008, 51.98899298221422],
          [-9.34421678729258, 51.98899298221422],
          [-9.34421678729258, 52.34948719034636]]], null, false);

var satellite = 'L9';
var date_start = '2022-01-01';
var date_end = '2022-07-31';
var use_ndvi = true;

// get landsat collection with added variables: NDVI, FVC, TPW, EM, LST
var LandsatColl = LandsatLST.collection(satellite, date_start, date_end, geometry, use_ndvi);
print(LandsatColl);

// select the X (number) feature of the image collection
var listOfImages = LandsatColl.toList((LandsatColl.size()));
print(listOfImages);
var exImage = ee.Image(listOfImages.get(20));

// Visualisation Palettes
var cmap1 = ['blue', 'cyan', 'green', 'yellow', 'red'];
var cmap2 = ['F2F2F2','EFC2B3','ECB176','E9BD3A','E6E600','63C600','00A600']; 

// center and zoom map to AOI
Map.centerObject(geometry, 9);

// Adding Map Layers
Map.addLayer(exImage.select('TPW'),{min:0.0, max:60.0, palette:cmap1},'TCWV');
Map.addLayer(exImage.select('TPWpos'),{min:0.0, max:9.0, palette:cmap1},'TCWVpos');
Map.addLayer(exImage.select('FVC'),{min:0.0, max:1.0, palette:cmap2}, 'FVC');
Map.addLayer(exImage.select('EM'),{min:0.9, max:1.0, palette:cmap1}, 'Emissivity');
    // Add Thermal B10 Band with new Col2 Scaling Factor. Inspector will give the unsigned 16 bit integer value
Map.addLayer(exImage.select('ST_B10').multiply(0.00341802).add(149.0),{min:273, max:290, palette:cmap1}, 'TIR BT');
    // LST already has scaling factor applied, which matches ST_B10 with Scaling Factor applied
Map.addLayer(exImage.select('LST'),{min:273, max:290, palette:cmap1}, 'LST');
    // Add SR RGB with new Col2 Scaling Factor. Inspector gives unsigned 16-bit values
Map.addLayer(exImage.multiply(0.0000275).add(-0.2),{bands: ['SR_B4', 'SR_B3', 'SR_B2'], min:0, max:0.3}, 'RGB');

// uncomment the code below to export a image band to your drive
/*
Export.image.toDrive({
  image: exImage.select('LST'),
  description: 'LST',
  scale: 30,
  region: geometry,
  fileFormat: 'GeoTIFF',
});
*/
